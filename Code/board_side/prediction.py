import storage
import os
import time
import board
import analogio
from digitalio import DigitalInOut, Direction, Pull
import ulab.numpy as np
import tm1637

class SimpleNN:
    def __init__(self):
        self.w1=np.zeros((1,21))
        self.b1=np.zeros((21))
        
        self.w2=np.zeros((21,5))
        self.b2=np.zeros((5))
        
        self.w3=np.zeros((5,1))
        self.b3=np.zeros((1))
    def relu(self,x):
        return np.maximum(x,0)#torch.relu(torch.tensor(x)).detach().numpy()#
    def forward(self,x):
        h=self.relu(np.dot(x,self.w1)+self.b1)
        h=self.relu(np.dot(h,self.w2)+self.b2)
        h=np.dot(h,self.w3)+self.b3
        return h
    def reshape(self):
        self.w1=np.around(self.w1.reshape((1,21)),decimals=4)
        self.b1=np.around(self.b1.reshape((1,21)),decimals=4)
        self.w2=np.around(self.w2.reshape((21,5)),decimals=4)
        self.b2=np.around(self.b2.reshape((1,5)),decimals=4)
        self.w3=np.around(self.w3.reshape((5,1)),decimals=4)
        self.b3=np.around(self.b3.reshape((1,1)),decimals=4)
        
model=SimpleNN()
model.w1=np.array( [[-0.7000062465667725, -0.8305444121360779, 0.27922260761260986, -0.8159389495849609, -5.315109729766846, 0.6620736122131348, 9.289552688598633, 0.8159716129302979, -0.03547012805938721, -0.43851470947265625, 2.450671911239624, 8.48858642578125, 0.494533896446228, 1.0367826223373413, -5.759180068969727, -0.02212989330291748, 0.7692402601242065, 0.7584546804428101, 9.554434776306152, -1.6320135593414307, 0.18156041204929352]] )
model.b1=np.array( [-0.9941424131393433, 1.120008945465088, -0.11176586151123047, -0.18242812156677246, 0.5178545713424683, 0.7264984846115112, 0.005280154291540384, -0.6862404346466064, -0.7059328556060791, -0.5621237754821777, 0.07116126269102097, -0.018869219347834587, -0.17596280574798584, 0.8604576587677002, 0.6344777345657349, -0.8804788589477539, 0.2781198024749756, -0.7249699831008911, 0.1345357447862625, 0.7950783371925354, 1.3161567449569702] )
model.w2=np.array( [[0.0686660185456276, 0.2144206166267395, 0.18679910898208618, -0.03513498231768608, 0.19973406195640564], [-0.1272641271352768, -0.7497938871383667, 0.17175239324569702, -0.11708319187164307, -0.1459973007440567], [-0.023753199726343155, 0.03217315301299095, -0.21610675752162933, 0.14299078285694122, 0.13135148584842682], [-0.14347779750823975, 0.04322635754942894, 0.0997387170791626, 0.17839060723781586, -0.006226120982319117], [0.2801356911659241, -5.199738502502441, 0.3107127249240875, -0.4794601798057556, -0.20305640995502472], [-0.1565762311220169, 0.6775653958320618, -0.1118653416633606, 0.19978538155555725, 0.14772406220436096], [-0.2432861328125, 9.064935684204102, -0.8672760128974915, 0.7672011256217957, 0.04008219763636589], [0.19280068576335907, -0.11429894715547562, 0.1825338453054428, -0.16416014730930328, 0.07710979878902435], [-0.010142208077013493, 0.17395520210266113, 0.18978744745254517, 0.07023818045854568, 0.15885990858078003], [0.1879110038280487, -0.21284911036491394, 0.019403908401727676, -0.04844580218195915, -0.20021887123584747], [0.09055616706609726, 2.3907365798950195, -0.43131348490715027, 0.2542482316493988, 0.17390942573547363], [-0.4034199118614197, 8.302298545837402, -0.8995285034179688, 0.5909438729286194, -0.1727408915758133], [0.031236818060278893, -0.005487646907567978, -0.18504174053668976, -0.16359445452690125, 0.007763004396110773], [-0.18456561863422394, 1.066117286682129, 0.030008496716618538, 0.17819063365459442, -0.14541688561439514], [0.30715906620025635, -5.610459327697754, 0.6243106722831726, -0.31095466017723083, -0.15559780597686768], [0.026565322652459145, 0.10250586271286011, -0.15144303441047668, 0.1519404649734497, 0.14594706892967224], [0.15707413852214813, 0.7942978143692017, -0.12190317362546921, -0.08383429050445557, -0.005447247996926308], [0.12492834031581879, 0.1708672046661377, 0.08629975467920303, -0.03419261425733566, 0.02617509290575981], [-0.06676938384771347, 9.382344245910645, -0.8333785533905029, 0.7164345979690552, -0.10535653680562973], [0.10841798782348633, -1.5641106367111206, 0.1705135852098465, 0.019882939755916595, -0.13747809827327728], [0.13494645059108734, 0.2549554705619812, 0.18457254767417908, -0.07751791924238205, -0.13591283559799194]] )
model.b2=np.array( [0.010089430958032608, 0.6829188466072083, -0.1245664656162262, -0.2021452635526657, -0.1920110136270523] )
model.w3=np.array( [[-0.5683199763298035], [17.585018157958984], [-1.746626615524292], [1.3302061557769775], [0.4354346692562103]] )
model.b3=np.array( [2.9706904888153076] )
model.reshape()

led = DigitalInOut(board.GP21)
led.direction = Direction.OUTPUT
analog_in = analogio.AnalogIn(board.GP26)
led.value=0
record = DigitalInOut(board.GP16)
record.direction = Direction.INPUT
record.pull = Pull.UP

CLK = board.GP3
DIO = board.GP2
display = tm1637.TM1637(CLK, DIO)

def get_voltage(pin):
    # Convert raw 16-bit ADC value (0-65535) to a voltage (0-3.3V)
    return (pin.value * 3.3) / 65535

file=None
alpha=0.7
past=get_voltage(analog_in)
past_weight=0
zero=0
while True:
    num=[]
    for i in range(10):
        voltage = get_voltage(analog_in)  # Convert to voltage
        low_pass=voltage*alpha + (1-alpha)*past
        past=low_pass
        preds=model.forward(np.array([low_pass]).reshape((1,1)))
        time.sleep(0.05)  # Delay to avoid flooding output
        prd=preds[0][0]-zero#alpha*preds[0][0] + (1-alpha)*past_weight - zero
        print({"Voltage":low_pass,"Weight":prd})
        past_weight=preds[0][0]
        if not record.value:
            zero=prd
        num.append(past_weight)
    prd=sum(num)/len(num)
    if prd>100: prd=99.99
    if prd<0: prd=0
    display.numbers(int(round(prd,0)),int((round(prd,2)-round(prd,0))*100))
        

